// Created by plusminus on 21:31:36 - 25.09.2008
package de.blau.android.services.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.Executors;

import org.mapsforge.android.maps.DebugSettings;
import org.mapsforge.android.maps.mapgenerator.JobParameters;
import org.mapsforge.android.maps.mapgenerator.JobTheme;
import org.mapsforge.android.maps.mapgenerator.MapGeneratorJob;
import org.mapsforge.android.maps.mapgenerator.databaserenderer.DatabaseRenderer;
import org.mapsforge.android.maps.mapgenerator.databaserenderer.ExternalRenderTheme;
import org.mapsforge.android.maps.rendertheme.InternalRenderTheme;
import org.mapsforge.android.maps.rendertheme.RenderTheme;
import org.mapsforge.core.Tile;
import org.mapsforge.map.reader.MapDatabase;


import de.blau.android.Application;
import de.blau.android.services.IOpenStreetMapTileProviderCallback;
import de.blau.android.views.util.OpenStreetMapTileServer;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.os.RemoteException;
import android.util.Log;

/**
 * The OpenStreetMapTileDownloader loads tiles from a server and passes them to
 * a OpenStreetMapTileFilesystemProvider.<br/>
 * This class was taken from OpenStreetMapViewer (original package org.andnav.osm) in 2010-06
 * by Marcus Wolschon to be integrated into the de.blau.androin
 * OSMEditor. 
 *
 * Version with UGLY HACKS by Jan Schejbal for device-based rendering using mapsforge.
 * Proof of concept, not code meant to be ever used!
 *
 * @author Nicolas Gramlich
 * @author Marcus Wolschon <Marcus@Wolschon.biz
 * @author Manuel Stahl
 * @author Jan Schejbal
 *
 */
public class OpenStreetMapTileDownloader extends OpenStreetMapAsyncTileProvider {
	// ===========================================================
	// Constants
	// ===========================================================

	private static final String DEBUGTAG = "OSM_DOWNLOADER";

	// ===========================================================
	// Fields
	// ===========================================================

	protected final Context mCtx;
	protected final OpenStreetMapTileFilesystemProvider mMapTileFSProvider;

	// ===========================================================
	// Constructors
	// ===========================================================

	public OpenStreetMapTileDownloader(final Context ctx, final OpenStreetMapTileFilesystemProvider aMapTileFSProvider){
		mCtx = ctx;
		mMapTileFSProvider = aMapTileFSProvider;
		mThreadPool = Executors.newFixedThreadPool(4);
	}

	// ===========================================================
	// Getter & Setter
	// ===========================================================

	// ===========================================================
	// Methods from SuperClass/Interfaces
	// ===========================================================

	protected Runnable getTileLoader(OpenStreetMapTile aTile, IOpenStreetMapTileProviderCallback aCallback) {
		return new TileLoader(aTile, aCallback);
	};
	
	// ===========================================================
	// Methodsorg.andnav.osm.services
	// ===========================================================

	private String buildURL(final OpenStreetMapTile tile) {
		OpenStreetMapTileServer renderer = OpenStreetMapTileServer.get(mCtx.getResources(), tile.rendererID);
		return renderer.getTileURLString(tile);
	}

	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
	
	private class TileLoader extends OpenStreetMapAsyncTileProvider.TileLoader {
		
		public TileLoader(final OpenStreetMapTile aTile, final IOpenStreetMapTileProviderCallback aCallback) {
			super(aTile, aCallback);
		}
		
		//@Override
		public void run() {
			try {
				try {
					MapDatabase db = new MapDatabase();
					Log.d("renderer", "opening file: "+db.openFile(new File("/sdcard/maps/germany.map")));
					DatabaseRenderer renderer = new DatabaseRenderer();
					renderer.setMapDatabase(db);
										
					Tile tile = new Tile(this.mTile.x, this.mTile.y, (byte)this.mTile.zoomLevel);
	
					ExternalRenderTheme rendertheme = null;
					rendertheme = new ExternalRenderTheme(new File("/sdcard/maps/rendertheme.xml"));
	
	
					MapGeneratorJob job = new MapGeneratorJob(
							tile,
							renderer,
							new JobParameters(rendertheme, 1.0f),
							new DebugSettings(true,true,true)
						);
					
					Bitmap b = Bitmap.createBitmap(256, 256, Config.ARGB_8888);
					boolean result = renderer.executeJob(job, b);
					if (!result) throw new RuntimeException("Rendering failed");
					mCallback.mapTileLoaded(mTile.rendererID, mTile.zoomLevel, mTile.x, mTile.y, b);
				} catch (Exception e) {
					Log.e("Rendering", "failed", e);
					mCallback.mapTileFailed(mTile.rendererID, mTile.zoomLevel, mTile.x, mTile.y);
				}
			} catch (RemoteException e) {
				// ??? why does a notification throw RemoteException?
				e.printStackTrace();
			}
			finished();
			
		}
	};
	
}
