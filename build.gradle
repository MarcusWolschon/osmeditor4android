// Top-level build file where you can add
// configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
		maven { url 'https://dl.bintray.com/content/simonpoole/div' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
		classpath 'org.kordamp:markdown-gradle-plugin:1.3.0'
    }
}

plugins {
	id "de.undercouch.download" version "3.1.1"
}
import de.undercouch.gradle.tasks.download.Download

allprojects {
	repositories {
		mavenCentral()
		jcenter()
	}
}

// Project level build file starts here
apply plugin: 'eclipse'
apply plugin: 'com.android.application'
apply plugin: 'org.kordamp.gradle.markdown'

// note this is currently processed by a slightly modified version of the 
// org.kordamp.gradle.markdown plugin with support for a html template and 
// not the original
markdownToHtml.sourceDir  new File(projectDir.getPath() + '/documentation/docs/help')
markdownToHtml.inputEncoding "utf8"
markdownToHtml.outputDir  new File(projectDir.getPath() + '/assets/help')
markdownToHtml.outputEncoding "utf8"

task downloadPresetIconsZipFile(type: Download) {
	doFirst {
		delete projectDir.getPath() + '/assets/images/icons/png'
	}
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/beautified-JOSM-preset/master/gen/vespucci_icons.zip'
    dest new File(projectDir.getPath() + '/assets/images/icons/png', 'vespucci_icons.zip')
}

task downloadPresetFile(type: Download) {
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/beautified-JOSM-preset/master/gen/vespucci_preset.xml'
    dest new File(projectDir.getPath() + '/assets/', 'preset.xml')
}

task updatePreset(dependsOn: ["downloadPresetFile", "downloadPresetIconsZipFile"], type: Copy) {
    from zipTree(downloadPresetIconsZipFile.dest)
	into projectDir.getPath() + '/assets/images/icons/png'
	doLast {
		delete downloadPresetIconsZipFile.dest
	}
}

task updateImagery(type: Download) {
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/osm-layer-index/gh-pages/imagery_tms_minified.json'
    dest new File(projectDir.getPath() + '/assets/', 'imagery.json')
}

eclipse {
// pathVariables 'GRADLE_HOME': gradle.gradleUserHomeDir, "ANDROID_HOME": android.sdkDirectory
    classpath {
        plusConfigurations += [ configurations.compile, configurations.testCompile ]

        file {
            beforeMerged { classpath ->
                // conventional android layout: classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("src/main/java", "bin"))
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("src", "bin"))
                // Hardcoded to use debug configuration
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/generated/source/r/debug", "bin"))
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/generated/source/buildConfig/debug", "bin"))
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/generated/source/aidl/debug", "bin"))
            }

            whenMerged { classpath ->
                def aars = []
                classpath.entries.each { dep ->
                    if (dep.path.toString().endsWith(".aar")) {
                        def explodedDir = new File(projectDir, "build/intermediates/exploded-aar/" + dep.moduleVersion.group + "/" + dep.moduleVersion.name + "/" + dep.moduleVersion.version + "/jars/")
                        if (explodedDir.exists()) {
                            explodedDir.eachFileRecurse(groovy.io.FileType.FILES) {
                                if (it.getName().endsWith("jar")) {
                                    def aarJar = new org.gradle.plugins.ide.eclipse.model.Library(fileReferenceFactory.fromFile(it))
                                    aarJar.sourcePath = dep.sourcePath
                                    aars.add(aarJar)
                                }
                            }
                        } else {
                            println "Warning: Missing " + explodedDir
                        }
                    }
                }
                classpath.entries.removeAll { it.path.endsWith(".aar") }
                classpath.entries.addAll(aars)

                def androidJar = new org.gradle.plugins.ide.eclipse.model.Variable(
                    fileReferenceFactory.fromPath("ANDROID_HOME/platforms/" + android.compileSdkVersion + "/android.jar"))
                androidJar.sourcePath = fileReferenceFactory.fromPath("ANDROID_HOME/sources/" + android.compileSdkVersion)
                classpath.entries.add(androidJar)
            }
        }
    }
}

eclipseClasspath.dependsOn "generateDebugSources"


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion project.getMinSdkVersion()
        targetSdkVersion project.getTargetSdkVersion()
        versionCode project.getVersionCode()
        versionName "${project.getVersionName()}"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        test.setRoot('test')
        test {
            java.srcDirs = ['test/java']
            testOptions {
                unitTests.returnDefaultValues = true
            }
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

}

ext {
    okHttpVersion = "3.3.1"
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'ch.acra:acra:4.9.0'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.android.support:preference-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:support-annotations:23.3.0'
    compile 'com.nononsenseapps:filepicker:3.0.0'
    compile 'oauth.signpost:signpost-core:1.2.1.2'
	compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"
    compile 'com.drewnoakes:metadata-extractor:2.9.1'
    compile 'com.adobe.xmp:xmpcore:5.1.2'
    compile 'ch.poole:PoParser:0.7.2'
	compile 'ch.poole:OpeningHoursParser:0.1.2'
	compile 'ch.poole:ConditionalRestrictionParser:0.1.11'

    // Unit tests
    testCompile "junit:junit:4.12"
    testCompile "org.assertj:assertj-core:1.7.1"
}

android {
    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

int getMinSdkVersion() {
    def xml = getXmlFromFile("${projectDir}/AndroidManifest.xml")
    return xml.'uses-sdk'.@'android:minSdkVersion'.toInteger()
}

int getTargetSdkVersion() {
    def xml = getXmlFromFile("${projectDir}/AndroidManifest.xml")
    return xml.'uses-sdk'.@'android:targetSdkVersion'.toInteger()
}

int getVersionCode() {
    def xml = getXmlFromFile("${projectDir}/AndroidManifest.xml")
    return xml.@'android:versionCode'.toInteger()
}

String getVersionName() {
    def xml = getXmlFromFile("${projectDir}/res/values/appname.xml")
    def versionName = xml.string.find { it.@name == 'app_version' }.toString()
    if (versionName == null || versionName.length() == 0) {
        throw new NullPointerException("Failure extracting version name.")
    }
    return versionName
}

def getXmlFromFile(String xmlFilePath) {
    def xml = new XmlSlurper().parse(new File(xmlFilePath))
    if (xml == null) {
        throw new NullPointerException("Failure reading from " + xmlFilePath)
    }
    return xml;
}
