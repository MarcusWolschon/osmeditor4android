// Top-level build file where you can add
// configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

// Project level build file starts here

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion project.getMinSdkVersion()
        targetSdkVersion project.getTargetSdkVersion()
        versionCode project.getVersionCode()
        versionName "${project.getVersionName()}"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:22.2.1'
}

int getMinSdkVersion() {
    def xml = getXmlFromFile("${projectDir}/AndroidManifest.xml")
    return xml.'uses-sdk'.@'android:minSdkVersion'.toInteger()
}

int getTargetSdkVersion() {
    def xml = getXmlFromFile("${projectDir}/AndroidManifest.xml")
    return xml.'uses-sdk'.@'android:targetSdkVersion'.toInteger()
}

int getVersionCode() {
    def xml = getXmlFromFile("${projectDir}/AndroidManifest.xml")
    return xml.@'android:versionCode'.toInteger()
}

String getVersionName() {
    def xml = getXmlFromFile("${projectDir}/res/values/appname.xml")
    def versionName = xml.string.find { it.@name == 'app_version' }.toString()
    if (versionName == null || versionName.length() == 0) {
        throw new NullPointerException("Failure extracting version name.")
    }
    return versionName
}

def getXmlFromFile(String xmlFilePath) {
    def xml = new XmlSlurper().parse(new File(xmlFilePath))
    if (xml == null) {
        throw new NullPointerException("Failure reading from " + xmlFilePath)
    }
    return xml;
}
